import{_ as o,c as r,o as l,ae as i}from"./chunks/framework.DTHJ7n2V.js";const p=JSON.parse('{"title":"API Reference (Summary)","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md"}'),c={name:"api.md"};function a(t,e,s,n,d,u){return l(),r("div",null,[...e[0]||(e[0]=[i('<h1 id="api-reference-summary" tabindex="-1">API Reference (Summary) <a class="header-anchor" href="#api-reference-summary" aria-label="Permalink to &quot;API Reference (Summary)&quot;">​</a></h1><p>This page summarizes the main public classes and methods. For full details, see JSDoc hovers or TypeDoc output.</p><h2 id="node-entry-spectrallogs" tabindex="-1">Node Entry (<code>spectrallogs</code>) <a class="header-anchor" href="#node-entry-spectrallogs" aria-label="Permalink to &quot;Node Entry (`spectrallogs`)&quot;">​</a></h2><ul><li><p><strong>Class</strong> <code>SpectralLogger</code></p><ul><li><code>configure(options)</code> — update configuration at runtime</li><li><code>use(plugin)</code> — register a plugin</li><li><code>log/info/success/warn/error/debug(message, color?, codec?)</code></li><li><code>flush()</code> — force flush buffered output</li><li><code>getConfig()</code> — resolved config</li><li><code>getErrorStats()</code> / <code>clearErrorCache()</code></li></ul></li><li><p><strong>Plugins</strong></p><ul><li><code>FileLoggerPlugin(options?)</code> — writes to file with rotation</li><li><code>PerformanceTrackerPlugin()</code> — measures logging durations</li></ul></li><li><p><strong>Types</strong> (from <code>src/types.d.ts</code>)</p><ul><li><code>LogLevel</code>, <code>SpectralConfigOptions</code>, <code>LogOptions</code>, <code>Plugin</code>, <code>ColorInput</code></li></ul></li></ul><h2 id="web-entry-spectrallogs-web" tabindex="-1">Web Entry (<code>spectrallogs/web</code>) <a class="header-anchor" href="#web-entry-spectrallogs-web" aria-label="Permalink to &quot;Web Entry (`spectrallogs/web`)&quot;">​</a></h2><ul><li><p><strong>Class</strong> <code>SpectralLoggerWeb</code></p><ul><li><code>configure(options)</code> — update configuration</li><li><code>use(plugin)</code> — register a web plugin</li><li><code>log/info/success/warn/error/debug(message, color?)</code></li><li><code>flush()</code></li><li><code>getConfig()</code> — resolved config</li><li><code>getErrorStats()</code> / <code>clearErrorCache()</code></li></ul></li><li><p><strong>Web Output</strong></p><ul><li>Batching options via <code>new SpectralLoggerWeb({ batching, maxBatchSize, maxLatencyMs, sink })</code></li></ul></li><li><p><strong>Plugins</strong></p><ul><li><code>PerformanceTrackerWeb()</code> — measures durations using <code>performance.now()</code></li></ul></li></ul><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li>Node build uses ANSI colors and stdout/stderr buffering.</li><li>Web build uses CSS colors and console/DOM sinks with batching.</li></ul>',8)])])}const f=o(c,[["render",a]]);export{p as __pageData,f as default};
